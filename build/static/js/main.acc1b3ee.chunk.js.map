{"version":3,"sources":["components/progressBar.js","components/scoreTracker.js","components/question.js","App.js","serviceWorker.js","index.js"],"names":["ProgressBar","_ref","questionNumber","totalNumOfQuestions","value","react_default","a","createElement","className","role","aria-valuemin","aria-valuemax","toString","style","width","concat","ScoreTracker","numOfQuestionsAnswered","numOfCorrectAnswers","numOfWrongAnswers","leastPossibleScore","toFixed","currentScore","Math","ceil","highestPossibleScore","floor","Question","result","selectedQuestion","correctAnswerIndex","showNextQuestion","_useState","useState","_useState2","Object","slicedToArray","isCorrect","setIsCorrect","_useState3","_useState4","clicked","setClicked","_useState5","_useState6","setNumOfQuestionsAnswered","_useState7","_useState8","setNumOfCorrectAnswers","_useState9","_useState10","setNumOfWrongAnswers","correctAnswerButton","useRef","category","decodeURIComponent","decodedQuestion","question","verifyOption","selectedOption","correctAnswer","e","previousState","current","classList","add","target","document","querySelectorAll","forEach","button","disabled","questionDifficulty","n","arr","i","push","key","numOfDifficultyStars","difficulty","correct_answer","incorrectOptions","incorrect_answers","map","option","decodedOption","onClick","allOptions","toConsumableArray","splice","ref","displayOptions","remove","querySelector","scoreTracker","App","setQuestionNumber","random","progressBar","allQuestions","length","Boolean","window","location","hostname","match","ReactDOM","render","src_App","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"olLAaeA,SAXK,SAAAC,GAA6C,IAA1CC,EAA0CD,EAA1CC,eAAgBC,EAA0BF,EAA1BE,oBAC9BC,EAASF,EAAiBC,EAAuB,IACvD,OACGE,EAAAC,EAAAC,cAAA,OAAKC,UAAU,YACZH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,8BAA8BC,KAAK,cAC/CC,gBAAc,IAAIC,gBAAeR,EAAoBS,WAAYC,MAAO,CAAEC,MAAK,GAAAC,OAAKX,EAAL,kBCY5EY,EAjBM,SAAAf,GAA6F,IAA1FgB,EAA0FhB,EAA1FgB,uBAAwBC,EAAkEjB,EAAlEiB,oBAAqBC,EAA6ClB,EAA7CkB,kBAAmBhB,EAA0BF,EAA1BE,oBAC9EiB,GAAuBF,EAAsBf,EAAuB,KAAKkB,QAAQ,GACjFC,EAA2C,IAA3BL,EAAgC,EAAIM,KAAKC,KAAMN,EAAsBD,EAA0B,KAC/GQ,EAAuBF,KAAKG,OAAQvB,EAAsBgB,GAAqBhB,EAAuB,KAC5G,OACIE,EAAAC,EAAAC,cAAA,OAAKC,UAAU,WACXH,EAAAC,EAAAC,cAAA,KAAGC,UAAU,SAAQH,EAAAC,EAAAC,cAAA,sBAAAQ,OAAiBO,EAAjB,MAAwCjB,EAAAC,EAAAC,cAAA,0BAAAQ,OAAqBU,EAArB,OAC7DpB,EAAAC,EAAAC,cAAA,OAAKC,UAAU,YACXH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,kCAAkCC,KAAK,cAAcI,MAAO,CAAEC,MAAK,GAAAC,OAAKK,EAAL,QAClFf,EAAAC,EAAAC,cAAA,OAAKC,UAAU,4BAA4BC,KAAK,cAAcI,MAAO,CAAEC,MAAK,GAAAC,OAAKO,EAAeF,EAApB,OAA5E,KACAf,EAAAC,EAAAC,cAAA,OAAKC,UAAU,qCAAqCC,KAAK,cAAcI,MAAO,CAAEC,MAAK,GAAAC,OAAKU,EAAuBH,EAA5B,WCkGtFK,MA1Gf,SAAA1B,GAAkH,IAQ1G2B,EARY1B,EAA8FD,EAA9FC,eAAgBC,EAA8EF,EAA9EE,oBAAqB0B,EAAyD5B,EAAzD4B,iBAAkBC,EAAuC7B,EAAvC6B,mBAAoBC,EAAmB9B,EAAnB8B,iBAAmBC,EAC5EC,mBAAS,MADmEC,EAAAC,OAAAC,EAAA,EAAAD,CAAAH,EAAA,GACvGK,EADuGH,EAAA,GAC5FI,EAD4FJ,EAAA,GAAAK,EAEhFN,oBAAS,GAFuEO,EAAAL,OAAAC,EAAA,EAAAD,CAAAI,EAAA,GAEvGE,EAFuGD,EAAA,GAE9FE,EAF8FF,EAAA,GAAAG,EAGlDV,mBAAS,GAHyCW,EAAAT,OAAAC,EAAA,EAAAD,CAAAQ,EAAA,GAGvG1B,EAHuG2B,EAAA,GAG/EC,EAH+ED,EAAA,GAAAE,EAIxDb,mBAAS,GAJ+Cc,EAAAZ,OAAAC,EAAA,EAAAD,CAAAW,EAAA,GAIvG5B,EAJuG6B,EAAA,GAIlFC,EAJkFD,EAAA,GAAAE,EAK5DhB,mBAAS,GALmDiB,EAAAf,OAAAC,EAAA,EAAAD,CAAAc,EAAA,GAKvG9B,EALuG+B,EAAA,GAKpFC,EALoFD,EAAA,GAMxGE,EAAsBC,mBAGV,OAAdhB,IAAoBT,EAAS,KACf,IAAdS,IAAoBT,EAAS,aACf,IAAdS,IAAqBT,EAAS,UAElC,IAAM0B,EAAWC,mBAAmB1B,EAAiByB,UAC/CE,EAAkBD,mBAAmB1B,EAAiB4B,UA6BtDC,EAAe,SAACC,EAAgBC,EAAeC,EAAG3D,EAAgBC,GAChEwD,IAAmBC,GACnBtB,GAAa,GACbU,EAAuB,SAAAc,GAAa,OAAIA,EAAgB,MAGxDxB,GAAa,GACba,EAAqB,SAAAW,GAAa,OAAIA,EAAgB,IACtDV,EAAoBW,QAAQC,UAAUC,IAAI,kBAG9CpB,EAA0B,SAAAiB,GAAa,OAAIA,EAAgB,IAC3DD,EAAEK,OAAOF,UAAUC,IAAI,WAEnBvB,EADDxC,IAAmBC,GAKtBgE,SAASC,iBAAiB,WAAWC,QAAQ,SAACC,GAC1CA,EAAOC,UAAW,KAgB1B,OACIlE,EAAAC,EAAAC,cAAA,OAAKC,UAAU,cACXH,EAAAC,EAAAC,cAAA,sBAAAQ,OAAiBb,EAAjB,QAAAa,OAAsCZ,IACtCE,EAAAC,EAAAC,cAAA,UAAK+C,GACLjD,EAAAC,EAAAC,cAAA,UAnEqB,SAACiE,GAC1B,IAAIC,EACEC,EAAM,GACe,SAAvBF,IAA+BC,EAAI,GACZ,WAAvBD,IAAiCC,EAAI,GACd,SAAvBD,IAA+BC,EAAI,GAEvC,IAAK,IAAIE,EAAI,EAAGA,EAAIF,EAAGE,IACnBD,EAAIE,KAAKvE,EAAAC,EAAAC,cAAA,KAAGsE,IAAKF,EAAGnE,UAAU,qBAElC,OAAOkE,EAyDEI,CAAqBjD,EAAiBkD,aAC3C1E,EAAAC,EAAAC,cAAA,UAAKiD,GACLnD,EAAAC,EAAAC,cAAA,OAAKC,UAAU,WAxDA,WACnB,IAAMoD,EAAgBL,mBAAmB1B,EAAiBmD,gBACpDC,EAAmBpD,EAAiBqD,kBAAkBC,IAAI,SAACC,GAC7D,IAAMC,EAAgB9B,mBAAmB6B,GACzC,OAAO/E,EAAAC,EAAAC,cAAA,UAAQ+E,QAAS,SAACzB,GAAD,OAAOH,EAAa2B,EAAezB,EAAeC,EAAG3D,EAAgBC,IAAsBK,UAAU,UACxH6E,KAGHE,EAAUpD,OAAAqD,EAAA,EAAArD,CAAO8C,GAIvB,OAHAM,EAAWE,OAAO3D,EAAoB,EAAGzB,EAAAC,EAAAC,cAAA,UAAQmF,IAAKtC,EACjDkC,QAAS,SAACzB,GAAD,OAAOH,EAAaE,EAAeA,EAAeC,EAAE3D,EAAgBC,IAAsBK,UAAU,UAAUoD,IAErH2B,EA6CEI,IAELtF,EAAAC,EAAAC,cAAA,OAAKC,UAAU,uBACXH,EAAAC,EAAAC,cAAA,MAAIC,UAAU,UAAUoB,GACvBa,GAAWpC,EAAAC,EAAAC,cAAA,UAAQ+E,QAAS,WACzBvD,IArBZO,EAAa,MACb6B,SAASC,iBAAiB,WAAWC,QAAQ,SAACC,GAC1CA,EAAOC,UAAW,IAEtB7B,GAAW,GACXU,EAAoBW,QAAQC,UAAU4B,OAAO,iBAC7CzB,SAAS0B,cAAc,YAAY7B,UAAU4B,OAAO,YAiBzCpF,UAAU,QAHD,kBAQhBH,EAAAC,EAAAC,cAACuF,EAAD,CAAc7E,uBAAwBA,EACpCC,oBAAqBA,EACrBC,kBAAmBA,EACnBhB,oBAAqBA,aC7EpB4F,MArBf,WAAe,IAAA/D,EAC+BC,mBAAS,GADxCC,EAAAC,OAAAC,EAAA,EAAAD,CAAAH,EAAA,GACN9B,EADMgC,EAAA,GACU8D,EADV9D,EAAA,GAEPJ,EAAsBP,KAAKG,MAAsB,EAAhBH,KAAK0E,UAM5C,OACE5F,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAC2F,EAAD,CAAahG,eAAgBA,EAC3BC,oBAAqBgG,EAAaC,SACpC/F,EAAAC,EAAAC,cAACkD,EAAD,CAAU5B,iBAAkBsE,EAAajG,EAAiB,GACxDC,oBAAqBgG,EAAaC,OAClClG,eAAgBA,EAChB4B,mBAAoBA,EACpBC,iBAAkB,WAZtBiE,EAAkB,SAAAlC,GAAa,OAAIA,EAAgB,SCEnCuC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOtG,EAAAC,EAAAC,cAACqG,EAAD,MAASzC,SAAS0C,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.acc1b3ee.chunk.js","sourcesContent":["import React from 'react'\n\nconst ProgressBar = ({ questionNumber, totalNumOfQuestions }) => {\n   const value = (questionNumber / totalNumOfQuestions) * 100\n   return (\n      <div className=\"progress\">\n         <div className=\"progress-bar questionNumber\" role=\"progressbar\" \n            aria-valuemin=\"0\" aria-valuemax={totalNumOfQuestions.toString()} style={{ width: `${value}%` }}>\n         </div>\n      </div>\n   )\n}\n\nexport default ProgressBar","import React from 'react'\n\nconst ScoreTracker = ({ numOfQuestionsAnswered, numOfCorrectAnswers, numOfWrongAnswers, totalNumOfQuestions }) => {\n    const leastPossibleScore = ((numOfCorrectAnswers / totalNumOfQuestions) * 100).toFixed(2)\n    const currentScore = (numOfQuestionsAnswered === 0) ? 0 : Math.ceil((numOfCorrectAnswers / numOfQuestionsAnswered) * 100)\n    const highestPossibleScore = Math.floor(((totalNumOfQuestions - numOfWrongAnswers) / totalNumOfQuestions) * 100)\n    return (\n        <div className='tracker'>\n            <p className='score'><span>{`Score: ${currentScore}%`}</span><span>{`Max Score: ${highestPossibleScore}%`}</span></p>\n            <div className=\"progress\">\n                <div className=\"progress-bar leastPossibleScore\" role=\"progressbar\" style={{ width: `${leastPossibleScore}%` }}></div>\n                <div className=\"progress-bar currentScore\" role=\"progressbar\" style={{ width: `${currentScore - leastPossibleScore}%` }}> </div>\n                <div className=\"progress-bar  highestPossibleScore\" role=\"progressbar\" style={{ width: `${highestPossibleScore - currentScore}%` }}></div>\n            </div>\n        </div>\n    )\n}\n\n\nexport default ScoreTracker","import React, { useState,useRef } from 'react'\nimport ScoreTracker from './scoreTracker'\n\n\nfunction Question({ questionNumber, totalNumOfQuestions, selectedQuestion, correctAnswerIndex, showNextQuestion}) {\n    const [isCorrect, setIsCorrect] = useState(null)\n    const [clicked, setClicked] = useState(false)\n    const [numOfQuestionsAnswered, setNumOfQuestionsAnswered] = useState(0)\n    const [numOfCorrectAnswers, setNumOfCorrectAnswers] = useState(0)\n    const [numOfWrongAnswers, setNumOfWrongAnswers] = useState(0)\n    const correctAnswerButton = useRef()\n\n    let result\n    if (isCorrect === null) result = ''\n    if (isCorrect === true) result = 'Correct!'\n    if (isCorrect === false) result = 'Sorry!'\n\n    const category = decodeURIComponent(selectedQuestion.category)\n    const decodedQuestion = decodeURIComponent(selectedQuestion.question)\n    const numOfDifficultyStars = (questionDifficulty) => {\n        let n\n        const arr = []\n        if (questionDifficulty === 'hard') n = 3\n        if (questionDifficulty === 'medium') n = 2\n        if (questionDifficulty === 'easy') n = 1\n\n        for (let i = 0; i < n; i++) {\n            arr.push(<i key={i} className=\"bi bi-star-fill\"></i>)\n        }\n        return arr\n    }\n\n    const displayOptions = () => {\n        const correctAnswer = decodeURIComponent(selectedQuestion.correct_answer)\n        const incorrectOptions = selectedQuestion.incorrect_answers.map((option) => {\n            const decodedOption = decodeURIComponent(option)\n            return <button onClick={(e) => verifyOption(decodedOption, correctAnswer, e, questionNumber, totalNumOfQuestions)} className='button' >\n                {decodedOption}\n            </button>\n        })\n        const allOptions = [...incorrectOptions]\n        allOptions.splice(correctAnswerIndex, 0, <button ref={correctAnswerButton}\n             onClick={(e) => verifyOption(correctAnswer, correctAnswer, e,questionNumber, totalNumOfQuestions)} className='button'>{correctAnswer}</button>)\n        \n        return allOptions\n\n    }\n    const verifyOption = (selectedOption, correctAnswer, e, questionNumber, totalNumOfQuestions) => {\n        if (selectedOption === correctAnswer) {\n            setIsCorrect(true)\n            setNumOfCorrectAnswers(previousState => previousState + 1)\n\n        } else {\n            setIsCorrect(false)\n            setNumOfWrongAnswers(previousState => previousState + 1)\n            correctAnswerButton.current.classList.add('correctAnswer')\n\n        }\n        setNumOfQuestionsAnswered(previousState => previousState + 1)\n        e.target.classList.add('clicked')\n        if(questionNumber === totalNumOfQuestions){\n            setClicked(false)\n        }else{\n            setClicked(true)\n        }\n        document.querySelectorAll('.button').forEach((button) => {\n            button.disabled = true\n        })\n     \n       \n    }\n\n    const returnToDefaultState = () => {\n        setIsCorrect(null)\n        document.querySelectorAll('.button').forEach((button) => {\n            button.disabled = false\n        })\n        setClicked(false)\n        correctAnswerButton.current.classList.remove('correctAnswer')\n        document.querySelector('.clicked').classList.remove('clicked')\n    }\n\n    return (\n        <div className='container '>\n            <h2>{`Question ${questionNumber} of ${totalNumOfQuestions}`}</h2>\n            <h5>{category}</h5>\n            <h6>{numOfDifficultyStars(selectedQuestion.difficulty)}</h6>\n            <h4>{decodedQuestion}</h4>\n            <div className='options'>\n                {displayOptions()}\n            </div>\n            <div className='correct text-center'>\n                <h2 className='result'>{result}</h2>\n                {clicked && <button onClick={() => {\n                    showNextQuestion()\n                    returnToDefaultState()\n                }} className='next'>\n                    Next question\n                </button>\n                }\n            </div>\n            <ScoreTracker numOfQuestionsAnswered={numOfQuestionsAnswered}\n              numOfCorrectAnswers={numOfCorrectAnswers}\n              numOfWrongAnswers={numOfWrongAnswers}\n              totalNumOfQuestions={totalNumOfQuestions}/>\n\n        </div>\n    )\n}\n\nexport default Question","import React, { useState } from 'react'\nimport './App.css'\nimport ProgressBar from './components/progressBar'\nimport Question from './components/question'\nimport allQuestions from './questions.json'\n\nfunction App() {\n  const [questionNumber, setQuestionNumber] = useState(1)\n  const correctAnswerIndex =  Math.floor(Math.random() * 4)\n  const getNewQuestion = (isCorrect) => {\n    setQuestionNumber(previousState => previousState + 1)\n  \n  }\n\n  return (\n    <div >\n      <ProgressBar questionNumber={questionNumber} \n        totalNumOfQuestions={allQuestions.length} />\n      <Question selectedQuestion={allQuestions[questionNumber - 1]}\n        totalNumOfQuestions={allQuestions.length}\n        questionNumber={questionNumber} \n        correctAnswerIndex={correctAnswerIndex}\n        showNextQuestion={() => getNewQuestion()}/>\n    </div>\n  )\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n)\n\nexport function register (config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href)\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config)\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          )\n        })\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config)\n      }\n    })\n  }\n}\n\nfunction registerValidSW (swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing\n        if (installingWorker == null) {\n          return\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              )\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration)\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.')\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration)\n              }\n            }\n          }\n        }\n      }\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error)\n    })\n}\n\nfunction checkValidServiceWorker (swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  window.fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type')\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload()\n          })\n        })\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config)\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      )\n    })\n}\n\nexport function unregister () {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister()\n    })\n  }\n}\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport './index.css'\nimport App from './App'\nimport * as serviceWorker from './serviceWorker'\n\nReactDOM.render(<App />, document.getElementById('root'))\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister()\n"],"sourceRoot":""}