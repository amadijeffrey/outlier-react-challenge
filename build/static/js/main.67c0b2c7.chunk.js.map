{"version":3,"sources":["components/start.js","components/progressBar.js","components/scoreTracker.js","components/Timer.js","components/question.js","Home.js","serviceWorker.js","index.js","App.js"],"names":["Start","navigate","useNavigate","react_default","a","createElement","className","type","onClick","ProgressBar","_ref","questionNumber","totalNumOfQuestions","value","role","aria-valuemin","aria-valuemax","toString","style","width","concat","ScoreTracker","numOfQuestionsAnswered","numOfCorrectAnswers","numOfWrongAnswers","leastPossibleScore","Math","floor","currentScore","ceil","toFixed","highestPossibleScore","data-testid","Timer","calculatedScoreAfterElapsedTime","_React$useState","React","useState","_React$useState2","Object","slicedToArray","countDown","setCountDown","_React$useState3","_React$useState4","runTimer","setRunTimer","_React$useState5","_React$useState6","isTimeUp","setIsTimeUp","useEffect","timerId","setInterval","clearInterval","seconds","String","padStart","minutes","Question","result","selectedQuestion","correctAnswerIndex","showNextQuestion","_useState","_useState2","isCorrect","setIsCorrect","_useState3","_useState4","clicked","setClicked","_useState5","_useState6","setNumOfQuestionsAnswered","_useState7","_useState8","setNumOfCorrectAnswers","_useState9","_useState10","setNumOfWrongAnswers","correctAnswerButton","useRef","_useState11","_useState12","time","setTime","document","querySelectorAll","forEach","button","disabled","numOfQuestionsNotAnswered","previousState","category","decodeURIComponent","decodedQuestion","question","verifyOption","selectedOption","correctAnswer","e","current","classList","add","target","questionDifficulty","n","arr","i","push","key","numOfDifficultyStars","difficulty","correct_answer","incorrectOptions","incorrect_answers","map","option","decodedOption","allOptions","toConsumableArray","splice","ref","displayOptions","remove","querySelector","scoreTracker","Home","setQuestionNumber","random","progressBar","allQuestions","length","Boolean","window","location","hostname","match","ReactDOM","render","dist","react_router_dist","path","element","src_Home","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.67c0b2c7.chunk.js","sourcesContent":["import React from \"react\"\nimport {useNavigate} from \"react-router-dom\"\n\nexport default function Start() {\n  const navigate = useNavigate()\n  \n    return (\n      <div className=\"background\">\n             <div className='welcome'>\n                <h1>Welcome to this quiz</h1>\n                <h3>You have 20 questions to answer in 15 minutes. Good luck!</h3>\n                <button className=\"startButton\" type=\"button\" onClick={() => navigate('/start')}>\n                  Take quiz\n                </button>\n            </div>\n      </div>\n    );\n  }","import React from 'react'\n\nconst ProgressBar = ({ questionNumber, totalNumOfQuestions }) => {\n   const value = (questionNumber / totalNumOfQuestions) * 100\n   return (\n      <div className=\"progress\">\n         <div className=\"progress-bar questionNumber\" role=\"progressbar\" \n            aria-valuemin=\"0\" aria-valuemax={totalNumOfQuestions.toString()} style={{ width: `${value}%` }}>\n         </div>\n      </div>\n   )\n}\n\nexport default ProgressBar","import React from 'react'\n\nconst ScoreTracker = ({ numOfQuestionsAnswered, numOfCorrectAnswers, numOfWrongAnswers, totalNumOfQuestions }) => {\n    const leastPossibleScore = Math.floor((numOfCorrectAnswers / totalNumOfQuestions) * 100)\n    const currentScore = (numOfQuestionsAnswered === 0) ? 0 : Math.ceil(((numOfCorrectAnswers / numOfQuestionsAnswered) * 100).toFixed(2))\n    const highestPossibleScore = Math.floor(((totalNumOfQuestions - numOfWrongAnswers) / totalNumOfQuestions) * 100)\n\n    return (\n        <div className='tracker' data-testid='1'>\n            <p className='score'><span data-testid='score'>{`Score: ${currentScore}%`}</span><span>{`Max Score: ${highestPossibleScore}%`}</span></p>\n            <div className=\"progress\">\n                <div className=\"progress-bar leastPossibleScore\" role=\"progressbar\" style={{ width: `${leastPossibleScore}%` }}></div>\n                <div className=\"progress-bar currentScore\" role=\"progressbar\" style={{ width: `${currentScore - leastPossibleScore}%` }}> </div>\n                <div className=\"progress-bar  highestPossibleScore\" role=\"progressbar\" style={{ width: `${highestPossibleScore - currentScore}%` }}></div>\n            </div>\n        </div>\n    )\n}\n\n\nexport default ScoreTracker","import React from \"react\"\n\nexport default function Timer({calculatedScoreAfterElapsedTime}) {\n    const [countDown, setCountDown] = React.useState(60 * 15);\n    const [runTimer, setRunTimer] = React.useState(true);\n    const [isTimeUp, setIsTimeUp] = React.useState(false)\n  \n    React.useEffect(() => {\n      let timerId;\n  \n      if (runTimer) {\n        timerId = setInterval(() => {\n          setCountDown((countDown) => countDown - 1);\n        }, 1000);\n      } else {\n        clearInterval(timerId);\n      }\n  \n      return () => clearInterval(timerId);\n    }, [runTimer]);\n  \n    React.useEffect(() => {\n      if (countDown === 0 && runTimer) {\n        setRunTimer(false);\n        setIsTimeUp(true)\n        calculatedScoreAfterElapsedTime()\n      }\n    }, [countDown, runTimer, calculatedScoreAfterElapsedTime]);\n  \n  \n    const seconds = String(countDown % 60).padStart(2, 0);\n    const minutes = String(Math.floor(countDown / 60)).padStart(2, 0);\n  \n    return (\n      <div className='timer'>\n          <h2>\n            {\n              isTimeUp ? <span>Time's Up</span> : \n              <span>{minutes}:{seconds} </span>\n            }\n            </h2>\n      </div>\n    );\n  }","import React, { useState,useRef, useEffect } from 'react'\nimport ScoreTracker from './scoreTracker'\nimport Timer from './Timer'\n\n\nfunction Question({ questionNumber, totalNumOfQuestions, selectedQuestion, correctAnswerIndex, showNextQuestion}) {\n    const [isCorrect, setIsCorrect] = useState(null)\n    const [clicked, setClicked] = useState(false)\n    const [numOfQuestionsAnswered, setNumOfQuestionsAnswered] = useState(0)\n    const [numOfCorrectAnswers, setNumOfCorrectAnswers] = useState(0)\n    const [numOfWrongAnswers, setNumOfWrongAnswers] = useState(0)\n    const correctAnswerButton = useRef()\n    const [time,setTime] = useState(false)\n\n    useEffect(() => {\n        if(time){\n            document.querySelectorAll('.button').forEach((button) => {\n                button.disabled = true\n            })\n            const numOfQuestionsNotAnswered = totalNumOfQuestions - numOfQuestionsAnswered\n            setNumOfQuestionsAnswered(20)\n            setNumOfWrongAnswers(previousState => previousState += numOfQuestionsNotAnswered)\n            setClicked(false)\n        }\n    }, [time, numOfQuestionsAnswered,totalNumOfQuestions])\n\n    const calculatedScoreAfterElapsedTime = () => {\n        setTime(true)\n    }\n\n    let result\n    if (isCorrect === null) result = ''\n    if (isCorrect === true) result = 'Correct!'\n    if (isCorrect === false) result = 'Sorry!'\n\n    const category = decodeURIComponent(selectedQuestion.category)\n    const decodedQuestion = decodeURIComponent(selectedQuestion.question)\n    const numOfDifficultyStars = (questionDifficulty) => {\n        let n\n        const arr = []\n        if (questionDifficulty === 'hard') n = 3\n        if (questionDifficulty === 'medium') n = 2\n        if (questionDifficulty === 'easy') n = 1\n\n        for (let i = 0; i < n; i++) {\n            arr.push(<i key={i} className=\"bi bi-star-fill\"></i>)\n        }\n        return arr\n    }\n\n    const displayOptions = () => {\n        const correctAnswer = decodeURIComponent(selectedQuestion.correct_answer)\n        const incorrectOptions = selectedQuestion.incorrect_answers.map((option) => {\n            const decodedOption = decodeURIComponent(option)\n            return <button onClick={(e) => verifyOption(decodedOption, correctAnswer, e, questionNumber, totalNumOfQuestions)} className='button' >\n                {decodedOption}\n            </button>\n        })\n        const allOptions = [...incorrectOptions]\n        allOptions.splice(correctAnswerIndex, 0, <button ref={correctAnswerButton}\n             onClick={(e) => verifyOption(correctAnswer, correctAnswer, e,questionNumber, totalNumOfQuestions)} className='button'>{correctAnswer}</button>)\n        \n        return allOptions\n\n    }\n    const verifyOption = (selectedOption, correctAnswer, e, questionNumber, totalNumOfQuestions) => {\n        if (selectedOption === correctAnswer) {\n            setIsCorrect(true)\n            setNumOfCorrectAnswers(previousState => previousState + 1)\n\n        } else {\n            setIsCorrect(false)\n            setNumOfWrongAnswers(previousState => previousState + 1)\n            correctAnswerButton.current.classList.add('correctAnswer')\n\n        }\n        setNumOfQuestionsAnswered(previousState => previousState + 1)\n        e.target.classList.add('clicked')\n        if(questionNumber === totalNumOfQuestions){\n            setClicked(false)\n        }else{\n            setClicked(true)\n        }\n        document.querySelectorAll('.button').forEach((button) => {\n            button.disabled = true\n        })\n    }\n\n    const returnToDefaultState = () => {\n        setIsCorrect(null)\n        document.querySelectorAll('.button').forEach((button) => {\n            button.disabled = false\n        })\n        setClicked(false)\n        correctAnswerButton.current.classList.remove('correctAnswer')\n        document.querySelector('.clicked').classList.remove('clicked')\n    }\n\n\n    return (\n        <div className='container '>\n            <h2>{`Question ${questionNumber} of ${totalNumOfQuestions}`}</h2>\n            <h5>{category}</h5>\n            <h6>{numOfDifficultyStars(selectedQuestion.difficulty)}</h6>\n            <h4>{decodedQuestion}</h4>\n            <div className='options'>\n                {displayOptions()}\n            </div>\n            <div className='correct text-center' >\n                <h2 className='result' data-testid='correct'>{result}</h2>\n                {clicked && <button onClick={() => {\n                    showNextQuestion()\n                    returnToDefaultState()\n                }} className='next'>\n                    Next question\n                </button>\n                }\n            </div>\n            <ScoreTracker numOfQuestionsAnswered={numOfQuestionsAnswered}\n              numOfCorrectAnswers={numOfCorrectAnswers}\n              numOfWrongAnswers={numOfWrongAnswers}\n              totalNumOfQuestions={totalNumOfQuestions}/>\n              <Timer calculatedScoreAfterElapsedTime={calculatedScoreAfterElapsedTime} />\n        </div>\n    )\n}\n\nexport default Question","import React, { useState } from 'react'\nimport ProgressBar from './components/progressBar'\nimport Question from './components/question'\nimport allQuestions from './questions.json'\n\nfunction Home() {\n  const [questionNumber, setQuestionNumber] = useState(1)\n  const correctAnswerIndex =  Math.floor(Math.random() * 4)\n  const getNewQuestion = () => {\n    setQuestionNumber(previousState => previousState + 1)\n  \n  }\n\n  return (\n    <div >\n      <ProgressBar questionNumber={questionNumber} \n        totalNumOfQuestions={allQuestions.length} />\n      <Question selectedQuestion={allQuestions[questionNumber - 1]}\n        totalNumOfQuestions={allQuestions.length}\n        questionNumber={questionNumber} \n        correctAnswerIndex={correctAnswerIndex}\n        showNextQuestion={() => getNewQuestion()}/>\n    </div>\n  )\n}\n\nexport default Home\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n)\n\nexport function register (config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href)\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config)\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          )\n        })\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config)\n      }\n    })\n  }\n}\n\nfunction registerValidSW (swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing\n        if (installingWorker == null) {\n          return\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              )\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration)\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.')\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration)\n              }\n            }\n          }\n        }\n      }\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error)\n    })\n}\n\nfunction checkValidServiceWorker (swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  window.fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type')\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload()\n          })\n        })\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config)\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      )\n    })\n}\n\nexport function unregister () {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister()\n    })\n  }\n}\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport './index.css'\nimport App from './App'\nimport * as serviceWorker from './serviceWorker'\n\nReactDOM.render(<App />, document.getElementById('root'))\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister()\n","import './App.css'\nimport React from \"react\"\nimport {BrowserRouter, Route, Routes} from \"react-router-dom\"\nimport Start from \"./components/start\"\nimport Home from \"./Home\"\n\n\nexport default function App(){\n    return(\n        <div>\n            <BrowserRouter>\n              <Routes>\n                 <Route path='/' element={<Start />} />\n                    <Route path='/start' element={<Home />} />\n              </Routes>\n            </BrowserRouter>\n        </div>\n    )\n}"],"sourceRoot":""}